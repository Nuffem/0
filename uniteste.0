lista # lista.0
efeitos # efeitos.0

{
  compara_listas: args =>
    args[0][.] != args[1][.] ? 0 :
    args[0][.] == 0 ? 1 :
    args[0][0] != args[1][0] ? 0 :
    compara_listas({args[0][1:] args[1][1:]})

  uniteste: {
    descrever: args => _ =>
      {
        mensagens: lista.mapear({
          lista.planificar(
            lista.mapear({
              args[1]
              teste => {
                resultado: teste(0)
                resultado[0:resultado[.] - 2]
              }[0]
            })
          )
          mensagem => efeitos.escreva({args[0] " | " mensagem[1]} * "")
        })
        passaram: lista.reduzir({
          lista.mapear({args[1] teste => {
            resultado: teste(0)
            resultado[resultado[.] - 1][2]
          }[0]})
          pair => pair[0] + pair[1]
        })
        {
          ...mensagens
          efeitos.escreva({"" + passaram "/" "" + mensagens[.] " testes passaram."} * "")
          efeitos.saia_com_contador({passaram == mensagens[.] ? 0 : 1 passaram})
        }
      }[0]
    iguais: args => _ =>
      args[0] == args[1] ?
        {
          efeitos.escreva("ok")
          efeitos.escreva("1/1 testes passaram.")
          efeitos.saia_com_contador({0 1})
        } :
        {
          efeitos.escreva({"Esperava que " "" + args[0] " fosse igual a " "" + args[1] "."} * "")
          efeitos.escreva("0/1 testes passaram.")
          efeitos.saia_com_contador({1 0})
        }
    listas_iguais: args => _ =>
      compara_listas({args[0] args[1]}) ?
        {
          efeitos.escreva("ok")
          efeitos.escreva("1/1 testes passaram.")
          efeitos.saia_com_contador({0 1})
        } :
        {
          efeitos.escreva({"Esperava que {" lista.juntar({args[0] ", "}) "} fosse igual a {" lista.juntar({args[1] ", "}) "}."} * "")
          efeitos.escreva("0/1 testes passaram.")
          efeitos.saia_com_contador({1 0})
        }
  }
}.uniteste