wasm = [0, 97, 115, 109]
versão = [1, 0, 0, 0]

sequência = (itens) => [itens[.], ...itens]

achatar = (lista) => lista[.] == 1 ? lista[0] : [...lista[0], ...achatar(lista[1:])]

seção = (id, bytes) => [id, ...sequência(bytes)]

seção_tipos = (itens) => seção(1, [itens[.], ...achatar(itens)])

tipo_função = (parâmetros, retornos) => [
  96,
  ...sequência(parâmetros),
  ...sequência(retornos),
]

inteiro_32 = 127
inteiro_64 = 126
real_32 = 125
real_64 = 124

seção_importação = (importações) => seção(2, [
  importações[.],
  ...achatar(importações),
])

importar_memória = (nome_módulo, nome_memória, limite) => [
  ...sequência(nome_módulo),
  ...sequência(nome_memória),
  2,
  0,
  limite,
]

seção_funções = (itens) => seção(3, sequência(itens))

seção_exportação = (exportações) => seção(7, [exportações[.], ...achatar(exportações)])

exportação_função = (nome, índice) => [...sequência(nome), 0, índice]

seção_código = (códigos) => seção(10, [
  códigos[.],
  ...achatar(códigos),
])

código = (locais, corpo) => sequência([
  ...sequência(locais),
  ...achatar(corpo),
])

inteiro_32_carregar_8_natural = (offset, align) => [44, align, offset]
inteiro_32_constante = (número) => [65, número]
inteiro_64_constante = (número) => [66, número]
real_32_constante = (número) => [67, número]
real_64_constante = (número) => [68, número]
obter_local = (i) => [32, i]
fim_função = [11]

declaração_tipos_funções = (funções) => funções[.] == 1 ? [
  tipo_função(funções[0][0], funções[0][1]),
] : [
  tipo_função(funções[0][0], funções[0][1]),
  ...declaração_tipos_funções(funções[1:]),
]

tipos_funções = (funções) => funções[.] == 1 ? [0] : [
  ...tipos_funções(funções[1:]),
  funções[.] - 1,
]

códigos_funções = (funções) => funções[.] == 1 ? [
  código([], [
    ...funções[0][2],
    fim_função,
  ]),
] : [
  código([], [
    ...funções[0][2],
    fim_função,
  ]),
  ...códigos_funções(funções[1:]),
]

módulo = (funções) => [
  ...wasm,
  ...versão,
  ...seção_tipos(declaração_tipos_funções(funções)),
  ...seção_importação([
    importar_memória([35], [36], 1),
  ]),
  ...seção_funções(tipos_funções(funções)),
  ...seção_exportação([
    exportação_função([48], 0),
  ]),
  ...seção_código(códigos_funções(funções)),
]

função = (parâmetros, retornos, código) => [parâmetros, retornos, código]

módulo([
  função([inteiro_32], [inteiro_32], [
    inteiro_32_constante(0),
    inteiro_32_carregar_8_natural(0, 0),
  ]),
])